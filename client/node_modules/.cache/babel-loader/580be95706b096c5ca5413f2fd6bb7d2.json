{"ast":null,"code":"import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\nexport default (config => {\n  const newConfig = mergeConfig({}, config);\n  let {\n    data,\n    withXSRFToken,\n    xsrfHeaderName,\n    xsrfCookieName,\n    headers,\n    auth\n  } = newConfig;\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer); // HTTP basic authentication\n\n  if (auth) {\n    headers.set('Authorization', 'Basic ' + btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : '')));\n  }\n\n  let contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  } // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n});","map":{"version":3,"sources":["D:/ExpressJS-ReactJS/BOOKINGAPP/client/node_modules/axios/lib/helpers/resolveConfig.js"],"names":["platform","utils","isURLSameOrigin","cookies","buildFullPath","mergeConfig","AxiosHeaders","buildURL","config","newConfig","data","withXSRFToken","xsrfHeaderName","xsrfCookieName","headers","auth","from","url","baseURL","allowAbsoluteUrls","params","paramsSerializer","set","btoa","username","password","unescape","encodeURIComponent","contentType","isFormData","hasStandardBrowserEnv","hasStandardBrowserWebWorkerEnv","setContentType","undefined","getContentType","type","tokens","split","map","token","trim","filter","Boolean","join","isFunction","xsrfValue","read"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,gBAAgBC,MAAD,IAAY;AACzB,QAAMC,SAAS,GAAGJ,WAAW,CAAC,EAAD,EAAKG,MAAL,CAA7B;AAEA,MAAI;AAACE,IAAAA,IAAD;AAAOC,IAAAA,aAAP;AAAsBC,IAAAA,cAAtB;AAAsCC,IAAAA,cAAtC;AAAsDC,IAAAA,OAAtD;AAA+DC,IAAAA;AAA/D,MAAuEN,SAA3E;AAEAA,EAAAA,SAAS,CAACK,OAAV,GAAoBA,OAAO,GAAGR,YAAY,CAACU,IAAb,CAAkBF,OAAlB,CAA9B;AAEAL,EAAAA,SAAS,CAACQ,GAAV,GAAgBV,QAAQ,CAACH,aAAa,CAACK,SAAS,CAACS,OAAX,EAAoBT,SAAS,CAACQ,GAA9B,EAAmCR,SAAS,CAACU,iBAA7C,CAAd,EAA+EX,MAAM,CAACY,MAAtF,EAA8FZ,MAAM,CAACa,gBAArG,CAAxB,CAPyB,CASzB;;AACA,MAAIN,IAAJ,EAAU;AACRD,IAAAA,OAAO,CAACQ,GAAR,CAAY,eAAZ,EAA6B,WAC3BC,IAAI,CAAC,CAACR,IAAI,CAACS,QAAL,IAAiB,EAAlB,IAAwB,GAAxB,IAA+BT,IAAI,CAACU,QAAL,GAAgBC,QAAQ,CAACC,kBAAkB,CAACZ,IAAI,CAACU,QAAN,CAAnB,CAAxB,GAA8D,EAA7F,CAAD,CADN;AAGD;;AAED,MAAIG,WAAJ;;AAEA,MAAI3B,KAAK,CAAC4B,UAAN,CAAiBnB,IAAjB,CAAJ,EAA4B;AAC1B,QAAIV,QAAQ,CAAC8B,qBAAT,IAAkC9B,QAAQ,CAAC+B,8BAA/C,EAA+E;AAC7EjB,MAAAA,OAAO,CAACkB,cAAR,CAAuBC,SAAvB,EAD6E,CAC1C;AACpC,KAFD,MAEO,IAAI,CAACL,WAAW,GAAGd,OAAO,CAACoB,cAAR,EAAf,MAA6C,KAAjD,EAAwD;AAC7D;AACA,YAAM,CAACC,IAAD,EAAO,GAAGC,MAAV,IAAoBR,WAAW,GAAGA,WAAW,CAACS,KAAZ,CAAkB,GAAlB,EAAuBC,GAAvB,CAA2BC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAApC,EAAkDC,MAAlD,CAAyDC,OAAzD,CAAH,GAAuE,EAA5G;AACA5B,MAAAA,OAAO,CAACkB,cAAR,CAAuB,CAACG,IAAI,IAAI,qBAAT,EAAgC,GAAGC,MAAnC,EAA2CO,IAA3C,CAAgD,IAAhD,CAAvB;AACD;AACF,GA1BwB,CA4BzB;AACA;AACA;;;AAEA,MAAI3C,QAAQ,CAAC8B,qBAAb,EAAoC;AAClCnB,IAAAA,aAAa,IAAIV,KAAK,CAAC2C,UAAN,CAAiBjC,aAAjB,CAAjB,KAAqDA,aAAa,GAAGA,aAAa,CAACF,SAAD,CAAlF;;AAEA,QAAIE,aAAa,IAAKA,aAAa,KAAK,KAAlB,IAA2BT,eAAe,CAACO,SAAS,CAACQ,GAAX,CAAhE,EAAkF;AAChF;AACA,YAAM4B,SAAS,GAAGjC,cAAc,IAAIC,cAAlB,IAAoCV,OAAO,CAAC2C,IAAR,CAAajC,cAAb,CAAtD;;AAEA,UAAIgC,SAAJ,EAAe;AACb/B,QAAAA,OAAO,CAACQ,GAAR,CAAYV,cAAZ,EAA4BiC,SAA5B;AACD;AACF;AACF;;AAED,SAAOpC,SAAP;AACD,CA9CD","sourcesContent":["import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  let contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n"]},"metadata":{},"sourceType":"module"}